import logging
import requests
from django.conf import settings
from django.shortcuts import get_object_or_404
from drf_yasg import openapi
from rest_framework import generics, permissions, serializers
from rest_framework.response import Response
from drf_yasg.utils import swagger_auto_schema
from order.models import Order, OrderItem
from order.serializers import OrderSerializer
from .models import Cart, CartItem
from .serializers import CartSerializer, CartItemAddSerializer, CartItemUpdateSerializer


class CartAPI(generics.RetrieveAPIView):
    serializer_class = CartSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        cart, created = Cart.objects.get_or_create(user=self.request.user)
        return cart

    @swagger_auto_schema(
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
        responses={
            200: CartSerializer,
        }
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)


class CartItemAddAPI(generics.CreateAPIView):
    serializer_class = CartItemAddSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_serializer_context(self):
        context = super().get_serializer_context()
        cart, created = Cart.objects.get_or_create(user=self.request.user)
        context['cart'] = cart
        return context

    @swagger_auto_schema(
        operation_summary="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É",
        operation_description="–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.",
        request_body=CartItemAddSerializer,
        responses={
            201: CartSerializer,
            400: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        }
    )
    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        cart = Cart.objects.get(user=self.request.user)
        return Response(CartSerializer(cart).data, status=201)


class CartItemUpdateAPI(generics.UpdateAPIView):
    serializer_class = CartItemUpdateSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return CartItem.objects.filter(cart__user=self.request.user)

    @swagger_auto_schema(
        operation_summary="–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ",
        operation_description="–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        request_body=CartItemUpdateSerializer,
        responses={
            200: CartSerializer,
            404: "–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω",
        }
    )
    def patch(self, request, *args, **kwargs):
        response = super().patch(request, *args, **kwargs)
        cart = Cart.objects.get(user=self.request.user)
        return Response(CartSerializer(cart).data)


class CartItemDeleteAPI(generics.DestroyAPIView):
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return CartItem.objects.filter(cart__user=self.request.user)

    @swagger_auto_schema(
        operation_summary="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
        operation_description="–£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        responses={
            204: "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            404: "–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω",
        }
    )
    def delete(self, request, *args, **kwargs):
        response = super().delete(request, *args, **kwargs)
        cart = Cart.objects.get(user=self.request.user)
        return Response(CartSerializer(cart).data, status=200)


class CartCheckoutAPI(generics.CreateAPIView):
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    @swagger_auto_schema(
        operation_summary="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
        operation_description="–°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                "address": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                    maxLength=500
                ),
                "comment": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É",
                    maxLength=1000
                )
            },
            example={
                "address": "123 Main St, City, Country",
                "comment": "Please deliver after 5 PM"
            }
        ),
        responses={
            201: OrderSerializer,
            400: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        }
    )
    def post(self, request, *args, **kwargs):
        cart = get_object_or_404(Cart, user=self.request.user)
        if not cart.items.exists():
            raise serializers.ValidationError("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

        for item in cart.items.all():
            if item.product.total < item.quantity:
                raise serializers.ValidationError(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {item.product.id}: "
                    f"–¥–æ—Å—Ç—É–ø–Ω–æ {item.product.total}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ {item.quantity}."
                )

        address = request.data.get('address', '')
        comment = request.data.get('comment', '')

        order = Order.objects.create(
            user=self.request.user,
            address=address,
            comment=comment
        )
        order_items = [
            OrderItem(
                order=order,
                product=item.product,
                quantity=item.quantity
            )
            for item in cart.items.all()
        ]
        OrderItem.objects.bulk_create(order_items)

        total_price = sum(item.quantity * item.product.price for item in cart.items.all())
        product_list = "\n".join(
            [f"- {item.product.title} (ID: {item.product.id}, –ö–æ–ª-–≤–æ: {item.quantity}, –¶–µ–Ω–∞: {item.product.price})"
             for item in cart.items.all()]
        )
        message = (
            f"<b>üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {self.request.user.name} {self.request.user.surname}\n"
            f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {self.request.user.phone_number}\n"
            f"<b>üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.comment or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:</b>\n{product_list}\n\n"
            f"<b>üíµ –û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price}\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"<b>üì¢ –°—Ç–∞—Ç—É—Å:</b> {order.status}"
        )

        telegram_url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': settings.TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(telegram_url, json=payload)
            response.raise_for_status()
        except requests.RequestException as e:
            logger = logging.getLogger(__name__)
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")

        cart.items.all().delete()

        return Response(OrderSerializer(order).data, status=201)