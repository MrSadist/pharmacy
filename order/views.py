import requests
import logging
from django.conf import settings
from rest_framework import generics, permissions
from rest_framework.response import Response
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from .models import Order
from .serializers import OrderSerializer, OrderCreateSerializer


class CreateOrderAPI(generics.CreateAPIView):
    serializer_class = OrderCreateSerializer
    permission_classes = [permissions.IsAuthenticated]

    @swagger_auto_schema(
        operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑",
        operation_description="–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–Ω–∏–º–∞—è –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["product_ids"],
            properties={
                "product_ids": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Schema(
                        type=openapi.TYPE_OBJECT,
                        properties={
                            "product_id": openapi.Schema(type=openapi.TYPE_INTEGER, description="ID –ø—Ä–æ–¥—É–∫—Ç–∞"),
                            "quantity": openapi.Schema(type=openapi.TYPE_INTEGER, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞"),
                        }
                    ),
                    description="–ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"
                ),
                "address": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                    maxLength=500
                ),
                "comment": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É",
                    maxLength=1000
                )
            },
            example={
                "product_ids": [
                    {"product_id": 1, "quantity": 2},
                    {"product_id": 2, "quantity": 1}
                ],
                "address": "123 Main St, City, Country",
                "comment": "Please deliver after 5 PM"
            }
        ),
        responses={
            201: OrderSerializer,
            400: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        }
    )
    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data, context={'request': request})
        serializer.is_valid(raise_exception=True)
        order = serializer.save()

        user = request.user
        total_price = sum(item.quantity * item.product.price for item in order.items.all())
        product_list = "\n".join(
            [f"- {item.product.title} (ID: {item.product.id}, –ö–æ–ª-–≤–æ: {item.quantity}, –¶–µ–Ω–∞: {item.product.price})"
             for item in order.items.all()]
        )
        message = (
            f"<b>üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {user.name} {user.surname}\n"
            f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
            f"<b>üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.comment or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:</b>\n{product_list}\n\n"
            f"<b>üíµ –û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price}\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"<b>üì¢ –°—Ç–∞—Ç—É—Å:</b> {order.status}"
        )

        telegram_url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': settings.TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(telegram_url, json=payload)
            response.raise_for_status()
        except requests.RequestException as e:
            logger = logging.getLogger(__name__)
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")

        return Response(OrderSerializer(order).data, status=201)


class UserOrdersAPI(generics.ListAPIView):
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Order.objects.filter(user=self.request.user)

    @swagger_auto_schema(
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        responses={
            200: openapi.Response(
                description="–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤",
                schema=openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Schema(
                        type=openapi.TYPE_OBJECT,
                        properties={
                            "id": openapi.Schema(type=openapi.TYPE_INTEGER, description="ID –∑–∞–∫–∞–∑–∞"),
                            "user": openapi.Schema(
                                type=openapi.TYPE_OBJECT,
                                properties={
                                    "id": openapi.Schema(type=openapi.TYPE_INTEGER, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                                    "email": openapi.Schema(type=openapi.TYPE_STRING, format="email", description="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                                    "name": openapi.Schema(type=openapi.TYPE_STRING, description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                                    "surname": openapi.Schema(type=openapi.TYPE_STRING, description="–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                                    "phone_number": openapi.Schema(type=openapi.TYPE_STRING, description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                                    "avatar": openapi.Schema(type=openapi.TYPE_STRING, format="uri", description="URL –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                                }
                            ),
                            "items": openapi.Schema(
                                type=openapi.TYPE_ARRAY,
                                items=openapi.Schema(
                                    type=openapi.TYPE_OBJECT,
                                    properties={
                                        "product": openapi.Schema(
                                            type=openapi.TYPE_OBJECT,
                                            properties={
                                                "id": openapi.Schema(type=openapi.TYPE_INTEGER, description="ID –ø—Ä–æ–¥—É–∫—Ç–∞"),
                                                "title": openapi.Schema(type=openapi.TYPE_STRING, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"),
                                                "price": openapi.Schema(type=openapi.TYPE_INTEGER, description="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"),
                                            }
                                        ),
                                        "quantity": openapi.Schema(type=openapi.TYPE_INTEGER, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
                                    }
                                ),
                                description="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ"
                            ),
                            "created_at": openapi.Schema(type=openapi.TYPE_STRING, format="date-time", description="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"),
                            "status": openapi.Schema(type=openapi.TYPE_STRING, description="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"),
                            "address": openapi.Schema(type=openapi.TYPE_STRING, description="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", nullable=True),
                            "comment": openapi.Schema(type=openapi.TYPE_STRING, description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É", nullable=True)
                        }
                    )
                )
            )
        }
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)


class IsAdminUser(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user and request.user.is_staff


class AdminOrderListAPI(generics.ListAPIView):
    serializer_class = OrderSerializer
    permission_classes = [IsAdminUser]
    queryset = Order.objects.all().order_by('-created_at')

    @swagger_auto_schema(
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–ê–¥–º–∏–Ω)",
        operation_description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º).",
        responses={
            200: OrderSerializer(many=True),
            403: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
        }
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)


class AdminOrderDetailAPI(generics.RetrieveAPIView):
    serializer_class = OrderSerializer
    permission_classes = [IsAdminUser]
    queryset = Order.objects.all()

    @swagger_auto_schema(
        operation_summary="–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–ê–¥–º–∏–Ω)",
        operation_description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ –µ–≥–æ ID –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        responses={
            200: OrderSerializer,
            403: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞",
            404: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)


class AdminOrderUpdateAPI(generics.UpdateAPIView):
    serializer_class = OrderSerializer
    permission_classes = [IsAdminUser]
    queryset = Order.objects.all()

    @swagger_auto_schema(
        operation_summary="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ (–ê–¥–º–∏–Ω)",
        operation_description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                "status": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    enum=['pending', 'shipping', 'delivered', 'cancelled'],
                    description="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"
                ),
                "address": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                    maxLength=500
                ),
                "comment": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É",
                    maxLength=1000
                ),
            },
            example={
                "status": "shipping",
                "address": "123 Main St, City, Country",
                "comment": "Updated comment"
            }
        ),
        responses={
            200: OrderSerializer,
            400: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            403: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞",
            404: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    )
    def patch(self, request, *args, **kwargs):
        return super().patch(request, *args, **kwargs)


class AdminOrderDeleteAPI(generics.DestroyAPIView):
    serializer_class = OrderSerializer
    permission_classes = [IsAdminUser]
    queryset = Order.objects.all()

    @swagger_auto_schema(
        operation_summary="–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ (–ê–¥–º–∏–Ω)",
        operation_description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ –µ–≥–æ ID.",
        responses={
            204: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            403: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞",
            404: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    )
    def delete(self, request, *args, **kwargs):
        return super().delete(request, *args, **kwargs)


class AdminOrderCreateAPI(generics.CreateAPIView):
    serializer_class = OrderCreateSerializer
    permission_classes = [IsAdminUser]

    @swagger_auto_schema(
        operation_summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (–ê–¥–º–∏–Ω)",
        operation_description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∑–∞–≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["product_ids", "user_id"],
            properties={
                "product_ids": openapi.Schema(
                    type=openapi.TYPE_ARRAY,
                    items=openapi.Schema(
                        type=openapi.TYPE_OBJECT,
                        properties={
                            "product_id": openapi.Schema(type=openapi.TYPE_INTEGER, description="ID –ø—Ä–æ–¥—É–∫—Ç–∞"),
                            "quantity": openapi.Schema(type=openapi.TYPE_INTEGER, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞"),
                        }
                    ),
                    description="–ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"
                ),
                "user_id": openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑"
                ),
                "address": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                    maxLength=500
                ),
                "comment": openapi.Schema(
                    type=openapi.TYPE_STRING,
                    description="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É",
                    maxLength=1000
                )
            },
            example={
                "product_ids": [
                    {"product_id": 1, "quantity": 2},
                    {"product_id": 2, "quantity": 1}
                ],
                "user_id": 1,
                "address": "123 Main St, City, Country",
                "comment": "Admin created order"
            }
        ),
        responses={
            201: OrderSerializer,
            400: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            403: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
        }
    )
    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data, context={'request': request})
        serializer.is_valid(raise_exception=True)
        order = serializer.save()

        user = order.user
        total_price = sum(item.quantity * item.product.price for item in order.items.all())
        product_list = "\n".join(
            [f"- {item.product.title} (ID: {item.product.id}, –ö–æ–ª-–≤–æ: {item.quantity}, –¶–µ–Ω–∞: {item.product.price})"
             for item in order.items.all()]
        )
        message = (
            f"<b>üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id} (–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º)</b>\n\n"
            f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {user.name} {user.surname}\n"
            f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}\n"
            f"<b>üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.comment or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:</b>\n{product_list}\n\n"
            f"<b>üíµ –û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price}\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"<b>üì¢ –°—Ç–∞—Ç—É—Å:</b> {order.status}"
        )

        telegram_url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': settings.TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(telegram_url, json=payload)
            response.raise_for_status()
        except requests.RequestException as e:
            logger = logging.getLogger(__name__)
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")

        return Response(OrderSerializer(order).data, status=201)